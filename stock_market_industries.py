# -*- coding: utf-8 -*-
"""assign2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a68R0YcO7-3JvndSUz7QZCwQbtVgBXjm

# Assignment 2 - Part 3 (BA870)
### Dongzhe Zhang(U73316569)

## Step 1: Example code to read CSV file into Pandas dataframe
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np
df = pd.read_csv('assign2.csv')
pd.DataFrame.from_records(df)
df.head()

"""## Step 2: Remove Unnecessary Columns and Rename Variables"""

# Remove unnecessary data columns for 2 variable Cluster Analysis
cols_remove = [0,1,2,3,4]
df.drop(df.columns[cols_remove],axis=1, inplace=True)

# Rename variables
# IMPORTANT - You will have to rename more variables
renamed_columns = ['Current_Assets', 'Accounts_Payable', 'Assets', 'Cash', 'COGS', 'Common_Shares_Outstanding', 'Long_Term_Debt',
                   'Depreciation_and_Amortization', 'Dividends', 'Inventories', 'Current_Liabilities', 'Liabilities', 'NI',
                   'PPE', 'Retained_Earnings', 'Receivables', 'Sales', 'Stockholders_Equity', 'Interest_Expense', 'SG&A', 'Price', 'SIC']
df.columns = renamed_columns
df.head()
df

"""## Step 3: Check and filling missing values"""

# Check missing values
df.isna().sum()

# Change 4-digit SIC code to 2-digit SIC code
df["SIC"] = (df["SIC"]/100).astype(int)

# filling missing values using medain value by industry
df_fillna = df.fillna(df.median())

"""## Step 4: Calculate Financial Ratios

Here we use financial ratios below:

*   Liquidity Ratios: Current ratio
*   Asset Management Ratios: Total assets turnover, reversed_inventory_turnover
*   Debt Management Ratios: debt ratio
*   Market Value Ratios: PE ratio, dividend yield

Customized Ratio:


*   ratio1 : Interest Expense / PPE
*   ratio2 : Inventories / Interest Expense
*   ratio3 : PPE / Asset
*   ratio4 : Inventories / Asset
"""

# make my own indicator: distance between groups divide by distance within group
ind = df_fillna.groupby(by='SIC').median().std() / df_fillna.groupby(by='SIC').std().mean()
ind.sort_values(ascending=False)

dfratio = df_fillna.copy()
# Calculate ratios
dfratio["current_ratio"] = df_fillna["Current_Assets"] / df_fillna["Current_Liabilities"]
dfratio["total_assets_turnover"] = df_fillna["Sales"] / df_fillna["Assets"]
dfratio["debt_ratio"] = df_fillna["Long_Term_Debt"] / df_fillna["Assets"]
dfratio["reversed_inventory_turnover"] = df_fillna["Inventories"] / df_fillna["COGS"]
dfratio["PE_ratio"] = df_fillna["Price"] / (df_fillna["NI"] / df_fillna["Common_Shares_Outstanding"])
dfratio["dividend_yield"] = df_fillna["Dividends"] / df_fillna["Price"]
dfratio["ratio1"] = df_fillna["Interest_Expense"] / (df_fillna["PPE"] + 0.0001)
dfratio["ratio2"] = df_fillna["Inventories"] / (df_fillna["Interest_Expense"] + 0.0001)
dfratio["ratio3"] = df_fillna["PPE"] / df_fillna["Assets"]
dfratio["ratio4"] = df_fillna["Inventories"] / df_fillna["Assets"]

# Delete variables
dfratio.drop(df.columns[0:21],axis=1, inplace=True)
dfratio

"""## Step 5: Print out the descriptive statistics for the variables
Note that there appear to be big outliers

Evidence: large difference in mean and median of variables
"""

dfratio.describe()

"""## Step 6: Remove outliers"""

dfratio['current_ratio']=dfratio.current_ratio.rank(pct=True)
dfratio['total_assets_turnover']=dfratio.total_assets_turnover.rank(pct=True)
dfratio['debt_ratio']=dfratio.debt_ratio.rank(pct=True)
dfratio['reversed_inventory_turnover']=dfratio.reversed_inventory_turnover.rank(pct=True)
dfratio['PE_ratio']=dfratio.PE_ratio.rank(pct=True)
dfratio['dividend_yield']=dfratio.dividend_yield.rank(pct=True)
dfratio["ratio1"] = dfratio.ratio1.rank(pct=True)
dfratio["ratio2"] = dfratio.ratio2.rank(pct=True)
dfratio["ratio3"] = dfratio.ratio3.rank(pct=True)
dfratio["ratio4"] = dfratio.ratio4.rank(pct=True)

dfratio.describe()

"""## Step 7: Graph variables using a scatter plot and Standardization"""

import seaborn as sns
sns.set(style="ticks")
sns.pairplot(dfratio, hue="SIC", corner=True, dropna=True)

from sklearn.preprocessing import StandardScaler
# drop SIC
standardized_dfratio = dfratio.copy()
standardized_dfratio.drop(standardized_dfratio.columns[0],axis=1, inplace=True)

# Standardization
scaler = StandardScaler().fit(standardized_dfratio)
standardized_dfratio = pd.DataFrame(scaler.transform(standardized_dfratio))
standardized_dfratio

"""## Step 8: Apply K-means Cluster Analysis"""

# import KMeans
from sklearn.cluster import KMeans
# Convert DataFrame to matrix
mat = standardized_dfratio.values
# Using sklearn
km = KMeans(n_clusters=6)
km.fit(mat)
# Get cluster assignment labels
labels = km.labels_
standardized_dfratio['Group']=labels
standardized_dfratio

"""## Step 9 : Graph the results of the predicted clusters"""

sns.set(style="ticks")
sns.pairplot(standardized_dfratio, hue="Group", corner=True, dropna=True)

"""## Step 10a : Merge the true labels (GroupSIC) with predicted labels (Group)"""

dfratio['Group']=standardized_dfratio.Group
dfratio

"""## Step 10b : Print out prediction accuracy"""

from sklearn import metrics
metrics.mutual_info_score(dfratio['SIC'], dfratio['Group'])

"""### The accuracy of the model is 50.14%"""